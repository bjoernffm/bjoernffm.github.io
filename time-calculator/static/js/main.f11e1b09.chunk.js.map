{"version":3,"sources":["reducers/times.js","actions/actions.js","reducers/index.js","components/TableRow.js","components/Table.js","components/TimeTable.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["initialState","times","state","action","type","previousHours","previousMinutes","length","total","hours","minutes","payload","Math","floor","parseInt","index","newState","splice","sumHours","sumMinutes","map","item","combineReducers","TableRow","onClick","hoursFormatted","padStart","minutesFormatted","totalHoursFormatted","totalMinutesFormatted","Table","onRemoveClick","border","time","key","TimeTable","connect","ownProps","dispatch","removeTime","Input","props","hoursInput","React","createRef","minutesInput","onSubmit","bind","onKeyDownHours","onKeyDownMinutes","hourInput","minuteInput","e","preventDefault","isNaN","this","current","value","addTime","focus","setState","indexOf","substr","ref","onKeyDown","placeholder","Component","store","createStore","timeApp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAKA,IAAMA,EAAe,GAgENC,MA9Df,WAA8C,IAA/BC,EAA8B,uDAAtBF,EAAcG,EAAQ,uCAEzC,OAAQA,EAAOC,MACX,ICNgB,WDOZ,IAAIC,EAAgB,EAChBC,EAAkB,EAElBJ,EAAMK,OAAS,IACfF,EAAgBH,EAAMA,EAAMK,OAAO,GAAGC,MAAMC,MAC5CH,EAAkBJ,EAAMA,EAAMK,OAAO,GAAGC,MAAME,SAGlD,IAAIA,EAAgD,IAApCL,EAAcF,EAAOQ,QAAQF,QAAcH,EAAgBH,EAAOQ,QAAQD,SACtFD,EAAQG,KAAKC,MAAMH,EAAQ,IAG/B,OAFAA,GAAoB,GAEd,GAAN,mBACOR,GADP,CAEI,CACIO,MAAON,EAAOQ,QAAQF,MACtBC,QAASP,EAAOQ,QAAQD,QACxBF,MAAO,CACHC,QACAC,cAIhB,IC7BmB,cD8Bf,GAAIR,EAAMK,OAAS,GAAuD,qBAA1CL,EAAMY,SAASX,EAAOQ,QAAQI,QAC1D,OAAOb,EAGX,IAAIc,EAAQ,YAAOd,GAGnB,GAFAc,EAASC,OAAOd,EAAOQ,QAAQI,MAAO,GAElCD,SAASX,EAAOQ,QAAQI,SAAWb,EAAMK,OAAO,EAChD,OAAOS,EAGX,IAAIE,EAAW,EACXC,EAAa,EAgBjB,OAfAH,EAAWA,EAASI,KAAI,SAACC,GACrB,IAAIX,EAAiC,IAArBQ,EAASG,EAAKZ,QAAcU,EAAWE,EAAKX,SAI5D,OAHAQ,EAAWN,KAAKC,MAAMH,EAAQ,IAC9BS,EAAaT,EAAU,GAEhB,CACHD,MAAOY,EAAKZ,MACZC,QAASW,EAAKX,QACdF,MAAO,CACHC,MAAOS,EACPR,QAASS,OAMzB,QACI,OAAOjB,IE7DJoB,cAAgB,CAC3BrB,UCkBWsB,EApBE,SAAC,GAAsC,IAArCd,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,QAASF,EAAoB,EAApBA,MAAOgB,EAAa,EAAbA,QAElCC,GAAkBhB,EAAM,IAAIiB,SAAS,EAAG,KACxCC,GAAoBjB,EAAQ,IAAIgB,SAAS,EAAG,KAE5CE,GAAuBpB,EAAMC,MAAM,IAAIiB,SAAS,EAAG,KACnDG,GAAyBrB,EAAME,QAAQ,IAAIgB,SAAS,EAAG,KAE3D,OAAQ,4BACI,4BAAKD,EAAL,IAAsBE,GACtB,4BAAKC,EAAL,IAA2BC,GAC3B,4BAAI,4BAAQL,QAASA,GAAjB,QC+BLM,EAzCD,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,cAAe9B,EAAW,EAAXA,MACvBwB,EAAiB,KACjBE,EAAmB,KAOvB,OALI1B,EAAMM,OAAS,IACfkB,GAAkBxB,EAAMA,EAAMM,OAAO,GAAGC,MAAMC,MAAM,IAAIiB,SAAS,EAAG,KACpEC,GAAoB1B,EAAMA,EAAMM,OAAO,GAAGC,MAAME,QAAQ,IAAIgB,SAAS,EAAG,MAIxE,2BAAOM,OAAO,KACV,+BACI,4BACI,oCACA,qCACA,+BAGR,+BACK/B,EAAMmB,KAAI,SAACa,EAAMlB,GAAP,OACT,kBAAC,EAAD,eAAUmB,IAAKnB,GAAWkB,EAA1B,CAAgCT,QAAS,kBAAMO,EAAchB,UAE/D,4BACI,6BACA,4BAAI,2BAAIU,EAAJ,IAAqBE,QCT9BQ,EAFGC,aAZM,SAAClC,EAAOmC,GAC5B,OAAOnC,KAGgB,SAACoC,EAAUD,GAClC,MAAO,CACHN,cAAe,SAAChB,GACZuB,EJSL,SAAoBvB,GACvB,MAAO,CACHX,KAlBmB,cAmBnBO,QAAS,CACLI,UIbSwB,CAAWxB,QAKdqB,CAA6CN,G,uCCXzDU,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,WAAaC,IAAMC,YACxB,EAAKC,aAAeF,IAAMC,YAE1B,EAAKE,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBAExB,EAAK7C,MAAQ,CACTgD,UAAW,QACXC,YAAa,SAZF,E,qDAgBVC,GACLA,EAAEC,iBAKF,IAAI5C,EAAQ,EACRC,EAAU,EAET4C,MAAMxC,SAASyC,KAAKb,WAAWc,QAAQC,UACxChD,EAAQK,SAASyC,KAAKb,WAAWc,QAAQC,QAExCH,MAAMxC,SAASyC,KAAKV,aAAaW,QAAQC,UAC1C/C,EAAUI,SAASyC,KAAKV,aAAaW,QAAQC,QAGnC,IAAVhD,GAA2B,IAAZC,GACf6C,KAAKd,MAAMH,SL7BhB,SAAiB7B,EAAOC,GAC3B,MAAO,CACHN,KATgB,WAUhBO,QAAS,CACLF,QACAC,YKwBoBgD,CAAQjD,EAAOC,IAEvC6C,KAAKb,WAAWc,QAAQC,MAAQ,GAChCF,KAAKV,aAAaW,QAAQC,MAAQ,GAClCF,KAAKb,WAAWc,QAAQG,QACxBJ,KAAKK,SAAS,CAAET,YAAa,QAASD,UAAW,Y,qCAGtCE,GACXA,EAAEC,iBAE2B,UAAzBE,KAAKrD,MAAMgD,WAC2B,IAAlC,CAAC,aAAaW,QAAQT,EAAElB,MAAiD,MAAlCqB,KAAKb,WAAWc,QAAQC,OAC/DF,KAAKb,WAAWc,QAAQC,MAAQ,GAChCF,KAAKK,SAAS,CAAEV,UAAW,YACsB,IAA1C,CAAC,IAAK,MAAO,SAASW,QAAQT,EAAElB,MACvCqB,KAAKb,WAAWc,QAAQC,MAAQ,IAChCF,KAAKV,aAAaW,QAAQG,QAC1BJ,KAAKK,SAAS,CAAEV,UAAW,YAC8C,IAAlE,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKW,QAAQT,EAAElB,OAC/DqB,KAAKb,WAAWc,QAAQC,MAAQL,EAAElB,IAClCqB,KAAKK,SAAS,CAAEV,UAAW,YAEC,WAAzBK,KAAKrD,MAAMgD,aACuB,IAArC,CAAC,MAAO,SAASW,QAAQT,EAAElB,KAC3BqB,KAAKV,aAAaW,QAAQG,SACe,IAAlC,CAAC,aAAaE,QAAQT,EAAElB,KAC3BqB,KAAKb,WAAWc,QAAQC,MAAMlD,OAAS,EACvCgD,KAAKb,WAAWc,QAAQC,MAAQF,KAAKb,WAAWc,QAAQC,MAAMK,OAAO,EAAGP,KAAKb,WAAWc,QAAQC,MAAMlD,OAAO,IAE7GgD,KAAKb,WAAWc,QAAQC,MAAQ,GAChCF,KAAKK,SAAS,CAAEV,UAAW,YAE+C,IAAvE,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKW,QAAQT,EAAElB,OACpEqB,KAAKb,WAAWc,QAAQC,OAASL,EAAElB,Q,uCAK9BkB,GACbA,EAAEC,iBAE6B,UAA3BE,KAAKrD,MAAMiD,aAC2B,IAAlC,CAAC,aAAaU,QAAQT,EAAElB,MAAiD,MAAlCqB,KAAKb,WAAWc,QAAQC,OAC/DF,KAAKV,aAAaW,QAAQC,MAAQ,GAClCF,KAAKK,SAAS,CAAET,YAAa,YACa,IAAnC,CAAC,IAAK,SAASU,QAAQT,EAAElB,MAChCqB,KAAKV,aAAaW,QAAQC,MAAQ,IAClCF,KAAKT,SAASM,KACuC,IAA9C,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKS,QAAQT,EAAElB,OAC3CqB,KAAKV,aAAaW,QAAQC,MAAQL,EAAElB,IACpCqB,KAAKK,SAAS,CAAET,YAAa,kBAEC,iBAA3BI,KAAKrD,MAAMiD,eACgB,IAA9B,CAAC,SAASU,QAAQT,EAAElB,KACpBqB,KAAKT,SAASM,IAC2B,IAAlC,CAAC,aAAaS,QAAQT,EAAElB,MAC/BqB,KAAKV,aAAaW,QAAQC,MAAQ,GAClCF,KAAKK,SAAS,CAAET,YAAa,YACiD,IAAvE,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKU,QAAQT,EAAElB,OACpEqB,KAAKV,aAAaW,QAAQC,OAASL,EAAElB,IACrCqB,KAAKK,SAAS,CAAET,YAAa,kBAC7BI,KAAKT,SAASM,O,+BAMtB,OACI,0BAAMN,SAAUS,KAAKT,UACjB,2BAAOiB,IAAKR,KAAKb,WAAYsB,UAAWT,KAAKP,eAAgB5C,KAAK,OAAO6D,YAAY,UACrF,2BAAOF,IAAKR,KAAKV,aAAcmB,UAAWT,KAAKN,iBAAkB7C,KAAK,OAAO6D,YAAY,YACzF,4BAAQ7D,KAAK,UAAb,Y,GA1GIuC,IAAMuB,WAkHX1B,EAFfA,EAAQJ,cAAUI,GC9GZ2B,EAAQC,YAAYC,GAYXC,EAVH,kBACR,kBAAC,IAAD,CAAUH,MAAOA,GACb,yBAAKI,UAAU,OACX,yCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f11e1b09.chunk.js","sourcesContent":["import {\r\n    ADD_TIME,\r\n    REMOVE_TIME\r\n} from '../actions/actions';\r\n\r\nconst initialState = [];\r\n\r\nfunction times(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case ADD_TIME:\r\n            let previousHours = 0;\r\n            let previousMinutes = 0;\r\n\r\n            if (state.length > 0) {\r\n                previousHours = state[state.length-1].total.hours;\r\n                previousMinutes = state[state.length-1].total.minutes;\r\n            }\r\n\r\n            let minutes = ((previousHours+action.payload.hours)*60) + (previousMinutes+action.payload.minutes);\r\n            let hours = Math.floor(minutes/60);\r\n            minutes = minutes % 60;\r\n\r\n            return [\r\n                ...state,\r\n                {\r\n                    hours: action.payload.hours,\r\n                    minutes: action.payload.minutes,\r\n                    total: {\r\n                        hours,\r\n                        minutes\r\n                    }\r\n                }\r\n            ];\r\n        case REMOVE_TIME:\r\n            if (state.length < 1 ||  typeof state[parseInt(action.payload.index)] === \"undefined\") {\r\n                return state;\r\n            }\r\n\r\n            let newState = [...state];\r\n            newState.splice(action.payload.index, 1);\r\n\r\n            if (parseInt(action.payload.index) === state.length-1) {\r\n                return newState;\r\n            }\r\n\r\n            let sumHours = 0;\r\n            let sumMinutes = 0;\r\n            newState = newState.map((item) => {\r\n                let minutes = ((sumHours+item.hours)*60) + (sumMinutes+item.minutes);\r\n                sumHours = Math.floor(minutes/60);\r\n                sumMinutes = minutes % 60;\r\n\r\n                return {\r\n                    hours: item.hours,\r\n                    minutes: item.minutes,\r\n                    total: {\r\n                        hours: sumHours,\r\n                        minutes: sumMinutes\r\n                    }\r\n                };\r\n            });\r\n\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default times;","/*\r\n * action types\r\n */\r\n\r\nexport const ADD_TIME = 'ADD_TIME';\r\nexport const REMOVE_TIME = 'REMOVE_TIME';\r\n\r\n/*\r\n * action creators\r\n */\r\n\r\nexport function addTime(hours, minutes) {\r\n    return {\r\n        type: ADD_TIME,\r\n        payload: {\r\n            hours,\r\n            minutes\r\n        }\r\n    };\r\n}\r\n\r\nexport function removeTime(index) {\r\n    return {\r\n        type: REMOVE_TIME,\r\n        payload: {\r\n            index\r\n        }\r\n    };\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport times from './times';\r\n\r\nexport default combineReducers({\r\n    times\r\n})","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableRow = ({hours, minutes, total, onClick}) => {\n\n    let hoursFormatted = (hours+\"\").padStart(2, '0');\n    let minutesFormatted = (minutes+\"\").padStart(2, '0');\n\n    let totalHoursFormatted = (total.hours+\"\").padStart(2, '0');\n    let totalMinutesFormatted = (total.minutes+\"\").padStart(2, '0');\n\n    return (<tr>\n                <td>{hoursFormatted}:{minutesFormatted}</td>\n                <td>{totalHoursFormatted}:{totalMinutesFormatted}</td>\n                <td><button onClick={onClick}>X</button></td>\n            </tr>);\n};\n\nTableRow.propTypes = {\n    hours: PropTypes.number.isRequired,\n    minutes: PropTypes.number.isRequired\n}\n\nexport default TableRow;\n","import React from 'react';\nimport TableRow from './TableRow';\nimport PropTypes from 'prop-types';\n\nconst Table = ({onRemoveClick, times}) => {\n    let hoursFormatted = \"00\";\n    let minutesFormatted = \"00\";\n\n    if (times.length > 0) {\n        hoursFormatted = (times[times.length-1].total.hours+\"\").padStart(2, '0');\n        minutesFormatted = (times[times.length-1].total.minutes+\"\").padStart(2, '0');\n    }\n\n    return (\n        <table border=\"1\">\n            <thead>\n                <tr>\n                    <th>Time</th>\n                    <th>Total</th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                {times.map((time, index) => (\n                  <TableRow key={index} {...time} onClick={() => onRemoveClick(index) } />\n                ))}\n                <tr>\n                    <td></td>\n                    <td><b>{hoursFormatted}:{minutesFormatted}</b></td>\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nTable.propTypes = {\n    times: PropTypes.arrayOf(\n        PropTypes.shape({\n            hours: PropTypes.number.isRequired,\n            minutes: PropTypes.number.isRequired\n        }).isRequired\n    ).isRequired,\n    onRemoveClick: PropTypes.func.isRequired\n}\n\nexport default Table;\n","import { connect } from 'react-redux'\n//import { setVisibilityFilter } from '../actions'\nimport Table from '../components/Table';\nimport { removeTime } from '../actions/actions';\n\nconst mapStateToProps = (state, ownProps) => {\n    return state;\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        onRemoveClick: (index) => {\n            dispatch(removeTime(index));\n        }\n    }\n}\n\nconst TimeTable = connect(mapStateToProps, mapDispatchToProps)(Table);\n\nexport default TimeTable","import React from 'react';\n//import PropTypes from 'prop-types';\nimport { connect } from 'react-redux'\nimport { addTime } from '../actions/actions';\n\n//let Input = ({ dispatch }) => {\nclass Input extends React.Component {\n    constructor(props) {\n        super(props); // makes this refer to this component\n\n        this.hoursInput = React.createRef();\n        this.minutesInput = React.createRef();\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onKeyDownHours = this.onKeyDownHours.bind(this);\n        this.onKeyDownMinutes = this.onKeyDownMinutes.bind(this);\n\n        this.state = {\n            hourInput: \"EMPTY\",\n            minuteInput: \"EMPTY\"\n        };\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        /*if (!input.value.trim()) {\n            return;\n        } */\n\n        let hours = 0;\n        let minutes = 0;\n\n        if (!isNaN(parseInt(this.hoursInput.current.value))) {\n            hours = parseInt(this.hoursInput.current.value);\n        }\n        if (!isNaN(parseInt(this.minutesInput.current.value))) {\n            minutes = parseInt(this.minutesInput.current.value);\n        }\n\n        if (hours !== 0 || minutes !== 0) {\n            this.props.dispatch(addTime(hours, minutes));\n        }\n        this.hoursInput.current.value = '';\n        this.minutesInput.current.value = '';\n        this.hoursInput.current.focus();\n        this.setState({ minuteInput: \"EMPTY\", hourInput: \"EMPTY\" });\n    }\n\n    onKeyDownHours(e) {\n        e.preventDefault();\n\n        if (this.state.hourInput === \"EMPTY\") {\n            if ([\"Backspace\"].indexOf(e.key) !== -1 && this.hoursInput.current.value === \"0\") {\n                this.hoursInput.current.value = \"\";\n                this.setState({ hourInput: \"EMPTY\" });\n            } else if ([\"0\", \"Tab\", \"Enter\"].indexOf(e.key) !== -1) {\n                this.hoursInput.current.value = \"0\";\n                this.minutesInput.current.focus();\n                this.setState({ hourInput: \"EMPTY\" });\n            } else if ([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].indexOf(e.key) !== -1) {\n                this.hoursInput.current.value = e.key;\n                this.setState({ hourInput: \"FILLED\" });\n            }\n        } else if (this.state.hourInput === \"FILLED\") {\n            if ([\"Tab\", \"Enter\"].indexOf(e.key) !== -1) {\n                this.minutesInput.current.focus();\n            } else if ([\"Backspace\"].indexOf(e.key) !== -1) {\n                if (this.hoursInput.current.value.length > 1) {\n                    this.hoursInput.current.value = this.hoursInput.current.value.substr(0, this.hoursInput.current.value.length-1);\n                } else {\n                    this.hoursInput.current.value = \"\";\n                    this.setState({ hourInput: \"EMPTY\" });\n                }\n            } else if ([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"].indexOf(e.key) !== -1) {\n                this.hoursInput.current.value += e.key;\n            }\n        }\n    }\n\n    onKeyDownMinutes(e) {\n        e.preventDefault();\n\n        if (this.state.minuteInput === \"EMPTY\") {\n            if ([\"Backspace\"].indexOf(e.key) !== -1 && this.hoursInput.current.value === \"0\") {\n                this.minutesInput.current.value = \"\";\n                this.setState({ minuteInput: \"EMPTY\" });\n            } else if ([\"0\", \"Enter\"].indexOf(e.key) !== -1) {\n                this.minutesInput.current.value = \"0\";\n                this.onSubmit(e);\n            } else if ([\"1\", \"2\", \"3\", \"4\", \"5\"].indexOf(e.key) !== -1) {\n                this.minutesInput.current.value = e.key;\n                this.setState({ minuteInput: \"FILLED_FIRST\" });\n            }\n        } else if (this.state.minuteInput === \"FILLED_FIRST\") {\n            if ([\"Enter\"].indexOf(e.key) !== -1) {\n                this.onSubmit(e);\n            } else if ([\"Backspace\"].indexOf(e.key) !== -1) {\n                this.minutesInput.current.value = \"\";\n                this.setState({ minuteInput: \"EMPTY\" });\n            } else if ([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"].indexOf(e.key) !== -1) {\n                this.minutesInput.current.value += e.key;\n                this.setState({ minuteInput: \"FILLED_SECOND\" });\n                this.onSubmit(e);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input ref={this.hoursInput} onKeyDown={this.onKeyDownHours} type=\"text\" placeholder=\"Hours\" />\n                <input ref={this.minutesInput} onKeyDown={this.onKeyDownMinutes} type=\"text\" placeholder=\"Minutes\" />\n                <button type=\"submit\">Add</button>\n            </form>\n        );\n    }\n};\n\nInput = connect()(Input);\n\nexport default Input;\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport timeApp from './reducers/index'\n\nimport TimeTable from './components/TimeTable';\nimport Input from './components/Input';\n\nconst store = createStore(timeApp);\n\nconst App = () => (\n    <Provider store={store}>\n        <div className=\"App\">\n            <h1>Timetable</h1>\n            <TimeTable />\n            <Input />\n        </div>\n    </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}